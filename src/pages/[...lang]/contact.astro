---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getListPage } from "@/lib/contentParser.astro";
import { getTranslations, supportedLang } from "@/lib/utils/languageParser";
import PageHeader from "@/partials/PageHeader.astro";
import { type ContentEntryMap } from "astro:content";
import { FaMapMarkerAlt, FaPhoneAlt } from "react-icons/fa";
import { FaEnvelope } from "react-icons/fa6";

export function getStaticPaths() {
  const paths = supportedLang.map((lang) => ({
    params: { lang: lang || undefined },
  }));
  return paths;
}

const { lang } = Astro.params;
const contact = await getListPage("contact", lang as keyof ContentEntryMap);

const { contact_form_action, contact_form_key, address, phone, email } =
  config.params;
const { title, description, meta_title, image } = contact[0].data;

const {
  our_address,
  phone_number,
  message_us,
  contact_form,
  send_message,
  placeholder_name,
  placeholder_email,
  placeholder_subject,
  placeholder_message,
  placeholder_phone,
  // Add translation keys for success/error messages if needed
  form_submission_success, // Example: "Your message has been sent successfully!"
  form_submission_error, // Example: "An error occurred. Please try again."
  form_validation_error, // Example: "Please fill out all required fields."
} = await getTranslations(lang as keyof ContentEntryMap);

// Provide default messages if translations are missing
const successMessage =
  form_submission_success || "Your message has been sent successfully!";
const errorMessage =
  form_submission_error || "An error occurred. Please try again.";
const validationMessage =
  form_validation_error || "Please fill out all required fields.";
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PageHeader title={title} />

  <!-- contact items -->
  <section class="section pb-0">
    <div class="container">
      <div class="row justify-center p-5">
        {description}
      </div>
      <div class="row justify-center g-5">
        <!-- Addresses -->
        <!-- <div class="col-10 sm:col-8 md:col-4">
          <div class="bg-white box-shadow text-center p-5 md:p-12">
            <FaMapMarkerAlt className="text-primary mx-auto mb-4" size={56} />

            <h4 class="mb-4 text-h5">{our_address}</h4>
            <ul class="text-balance space-y-1">
              <li>{address}</li>
            </ul>
          </div>
        </div> -->
        <!-- phone -->
        <div class="col-10 sm:col-8 md:col-4">
          <div class="bg-white box-shadow text-center p-5 md:p-12">
            <FaPhoneAlt className="text-primary mx-auto mb-4" size={56} />
            <h4 class="mb-4 text-h5">{phone_number}</h4>
            <ul class="text-balance">
              <li>{phone}</li>
            </ul>
          </div>
        </div>
        <!-- Mail -->
        <div class="col-10 sm:col-8 md:col-4">
          <div class="bg-white box-shadow text-center p-5 md:p-12">
            <FaEnvelope className="text-primary mx-auto mb-4" size={56} />
            <h4 class="mb-4 text-h5">{message_us}</h4>
            <ul class="text-balance">
              <li>{email}</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
  <!-- /contact item -->

  <!-- contact form and map -->
  <section class="section">
    <div class="container">
      <div class="row justify-center g-5">
        <!-- google map -->
        <div class="col-10 sm:col-8 md:col-5">
          <iframe
            class="w-full h-96 md:h-[500px]"
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3592.47048561731!2d-80.1406798!3d25.788048!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x88d9b4887af28147%3A0x7cf27ec835c20c76!2s1521%20Alton%20Rd%20%23109%2C%20Miami%20Beach%2C%20FL%2033139%2C%20USA!5e0!3m2!1sen!2sbd!4v1711167419704!5m2!1sen!2sbd"
            loading="lazy"></iframe>
        </div>

        <div class="col-10 sm:col-8 md:col-7">
          <h2 class="section-title">{contact_form}</h2>
          <form
            id="contact-form"
            action={contact_form_action}
            method="POST"
            class="row"
          >
            <input type="hidden" name="access_key" value={contact_form_key} />
            <input
              type="checkbox"
              name="botcheck"
              class="hidden"
              style="display: none;"
            />
            <div class="md:col-6">
              <input
                type="text"
                name="name"
                id="name"
                class="form-control border-0 rounded-none box-shadow mb-5"
                placeholder={placeholder_name}
                required
              />
            </div>
            <div class="md:col-6">
              <input
                type="email"
                name="mail"
                id="mail"
                class="form-control border-0 rounded-none box-shadow mb-5"
                placeholder={placeholder_email}
                required
              />
            </div>
            <div class="md:col-6">
              <input
                type="text"
                name="phone"
                id="phone"
                class="form-control border-0 rounded-none box-shadow mb-5"
                placeholder={placeholder_phone}
                required
              />
            </div>
            <div class="md:col-6">
              <input
                type="text"
                name="subject"
                id="subject"
                class="form-control border-0 rounded-none box-shadow mb-5"
                placeholder={placeholder_subject}
                required
              />
            </div>
            <div class="col-12">
              <textarea
                name="message"
                id="message"
                class="form-control border-0 rounded-none box-shadow mb-12 py-3 px-4"
                placeholder={placeholder_message}
                required></textarea>
            </div>
            <div class="col-12">
              <button
                type="submit"
                value="send"
                class="btn btn-primary hover-ripple"
                id="submit-button"
              >
                {send_message}
              </button>
            </div>
          </form>
          <div id="form-status" class="mt-4" aria-live="polite"></div>
        </div>
      </div>
    </div>
  </section>
  <!-- /contact form and map -->

  {/* Client-side script for form handling */}
  <script
    define:vars={{
      successMessage,
      errorMessage,
      validationMessage,
      sendingMessage: send_message,
    }}
  >
    const form = document.getElementById("contact-form");
    const statusDiv = document.getElementById("form-status");
    const submitButton = document.getElementById("submit-button");
    const originalButtonText = submitButton.textContent; // Store original button text

    // Define which fields are required
    const requiredFields = ["name", "mail", "phone", "subject", "message"]; // Use the 'name' attributes

    form.addEventListener("submit", async (event) => {
      event.preventDefault(); // Prevent default browser submission

      statusDiv.textContent = ""; // Clear previous status messages
      statusDiv.className = "mt-4"; // Reset classes
      submitButton.disabled = true; // Disable button during submission
      submitButton.textContent = "Sending..."; // Provide visual feedback

      const formData = new FormData(form);
      let isValid = true;

      // Basic Validation: Check if required fields are filled
      requiredFields.forEach((fieldName) => {
        const field = form.elements[fieldName];
        const value = formData.get(fieldName)?.toString().trim();
        if (!value) {
          isValid = false;
          // Optional: Add visual indication to the field
          field?.classList.add("is-invalid"); // You might need to define .is-invalid style
        } else {
          field?.classList.remove("is-invalid");
        }
      });

      if (!isValid) {
        statusDiv.textContent = validationMessage; // Use translated message
        statusDiv.classList.add("text-danger"); // Add error styling (assuming bootstrap-like class)
        submitButton.disabled = false; // Re-enable button
        submitButton.textContent = originalButtonText; // Restore button text
        // Optional: Focus the first invalid field
        const firstInvalid = form.querySelector(".is-invalid");
        firstInvalid?.focus();
        return; // Stop submission
      }

      // Remove validation error styles if form is now valid
      requiredFields.forEach((fieldName) => {
        form.elements[fieldName]?.classList.remove("is-invalid");
      });

      try {
        const response = await fetch(form.action, {
          method: "POST",
          body: formData,
          headers: {
            // 'Accept' header might be needed depending on the endpoint (e.g., formspree, web3forms)
            Accept: "application/json",
          },
        });

        if (response.ok) {
          // Check if status code is 2xx
          statusDiv.textContent = successMessage; // Use translated message
          statusDiv.classList.add("text-success"); // Add success styling
          form.reset(); // Clear the form fields
        } else {
          // Try to get error message from response if possible (depends on the backend)
          let errorData;
          try {
            errorData = await response.json();
          } catch (e) {
            // Ignore if response is not JSON
          }
          console.error(
            "Form submission error:",
            response.status,
            response.statusText,
            errorData
          );
          statusDiv.textContent = `${errorMessage} (Status: ${response.status})`; // Use translated message + status
          statusDiv.classList.add("text-danger"); // Add error styling
        }
      } catch (error) {
        console.error("Network error or fetch failed:", error);
        statusDiv.textContent = errorMessage; // Use translated message for network errors
        statusDiv.classList.add("text-danger"); // Add error styling
      } finally {
        // Re-enable the button regardless of success or error, unless it was successful (form reset)
        if (!statusDiv.classList.contains("text-success")) {
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText; // Restore button text
        } else {
          submitButton.textContent = "Sent!";
        }
      }
    });

    requiredFields.forEach((fieldName) => {
      const field = form.elements[fieldName];
      field?.addEventListener("input", () => {
        if (field.classList.contains("is-invalid")) {
          field.classList.remove("is-invalid");
          // Optionally clear the main validation message when user starts fixing errors
          if (statusDiv.textContent === validationMessage) {
            statusDiv.textContent = "";
            statusDiv.className = "mt-4";
          }
        }
      });
    });
  </script>
</Base>
